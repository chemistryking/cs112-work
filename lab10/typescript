Script started on Mon 05 Dec 2016 02:53:24 PM EST
mrn6@kay:~/workspace/112/proj10$ list   s
Debug		    ImageConverter.o	 main.o			   typescript
flipped_image.png   lightened_image.png  Makefile
ImageConverter.cpp  main		 pics
ImageConverter.h    main.cpp		 Project 10 Worksheet.xls
mrn6@kay:~/workspace/112/proj10$ cat *.h
/*
 * ImageConverter.h declares a class for
 *  various image conversion operations.
 *
 *  Author:  Joel Adams, CS112 @ Calvin College.
 *  Created: March 2015
 *  Revised: November 2016.
 */

#ifndef IMAGECONVERTER_H_
#define IMAGECONVERTER_H_

#include <tsgl.h>     // Canvas, ColorInt, etc.
#include <iostream>   // cout, cerr, ...
#include <string>     // string
#include <omp.h>      // OpenMP functions

using namespace tsgl;
using namespace std;

class ImageConverter {
public:
	ImageConverter(const std::string& imageFileName, int width, int height);
	~ImageConverter();
	void invertImage();
	void invertImage2();
	void invertImage3();
	void lighten();
	void flipHoriz();
private:
    Canvas      myCanvas1;
    string      myImageFileName;
    int         myWidth;
    int         myHeight;
};


#endif /* IMAGECONVERTER_H_ */
mrn6@kay:~/workspace/112/proj10$ cat *.cpp
/*
 * ImageConverter.cpp declares a class for
 *  various image conversion operations.
 *
 *  Author:  Joel Adams, CS112 @ Calvin College.
 *  Created: March 2015
 *  Revised: November 2016
 */

#include "ImageConverter.h"
#include <unistd.h>            // sleep()
#include <cmath>

//-----------------  Method definitions ------------------------------

/* explicit constructor
 *
 * @param imageFileName, a string.
 * @param width, an int.
 * @param height, an int.
 *
 * Precondition: imageFileName contains the name of a valid image file
 *               && width > 0 && height > 0
 * Postcondition: myImageFileName == imageFileName
 *                && myWidth == width && myHeight = height
 *                && width x height Canvas containing the image
 *                    from imageFileName has been displayed on screen.
 */
ImageConverter::ImageConverter(const std::string& imageFileName, int width,
		int height) :
		myCanvas1(0, 0, width, height, imageFileName), myImageFileName(
				imageFileName), myWidth(width), myHeight(height) {
	myCanvas1.start();
	myCanvas1.drawImage(myImageFileName, 0, 0, width, height);
	sleep(1);
}

/* destructor
 *
 * Precondition: this ImageConverter object is going out of scope.
 * Postcondition: myCanvas1 has disappeared from the screen.
 */
ImageConverter::~ImageConverter() {
	myCanvas1.wait();
	cout << "\nImageConverter terminated normally." << endl;
}

/* invertImage() inverts the image from myImageFileName.
 *
 * Precondition: myCanvas1 contains a TSGL Image that is to be inverted
 *               && myWidth contains the number of columns in which to display the image
 *               && myHeight contains the number of rows in which to display the image.
 *
 * Postcondition: a myWidth x myHeight Canvas has been displayed
 *                 containing the inverse of the image from myCanvas1
 *                 (which contains the image from myImageFileName).
 */

//Reads each pixel at the current location in the loop structure
//and prints it to the opposite side of the image, flipping it over the horizontal.
void ImageConverter::flipHoriz() {
	double startTime = omp_get_wtime();
	Canvas canvas1(myWidth + 50, 0, myWidth, myHeight,
			myImageFileName + " Flipped");
	canvas1.start();

#pragma omp parallel for
	for (int row = 0; row < myHeight; row++) {
		canvas1.sleep();
		for (int col = 0; col < myWidth; col++) {
			ColorInt pixelColor = myCanvas1.getPixel(row, col);
			canvas1.drawPixel(row, myWidth-col,
					pixelColor);
		}
	}

	double totalTime = omp_get_wtime() - startTime;
	cout << "\n\nImage flip took " << totalTime << " seconds.\n" << endl;

//	canvas1.takeScreenShot();
	canvas1.wait();
}


//Analyzes each pixel, adds 45 to R, G, and B and
//finally prints out the resultant pixel.
void ImageConverter::lighten() {
	double startTime = omp_get_wtime();
	Canvas canvas1(myWidth + 50, 0, myWidth, myHeight,
			myImageFileName + " Lightened");
	canvas1.start();

#pragma omp parallel for
	for (int row = 0; row < myHeight; row++) {
		canvas1.sleep();
		for (int col = 0; col < myWidth; col++) {
			ColorInt pixelColor = myCanvas1.getPixel(row, col);
			int lightenedR, lightenedG, lightenedB;
			if (pixelColor.R <= 210) {
				lightenedR = pixelColor.R + 45;
			} else {
				lightenedR = 255;
			}
			if (pixelColor.G <= 210) {
				lightenedG = pixelColor.G + 45;
			} else {
				lightenedG = 255;
			}
			if (pixelColor.B <= 210) {
				lightenedB = pixelColor.B + 45;
			} else {
				lightenedB = 255;
			}
			canvas1.drawPixel(row, col,
					ColorInt(lightenedR, lightenedG, lightenedB));
		}
	}

	double totalTime = omp_get_wtime() - startTime;
	cout << "\n\nImage lightening took " << totalTime << " seconds.\n" << endl;

//	canvas1.takeScreenShot();
	canvas1.wait();
}

void ImageConverter::invertImage() {
	// record starting time
	double startTime = omp_get_wtime();
	Canvas canvas2(myWidth + 50, 0, myWidth, myHeight,
			myImageFileName + " Inverted");
	canvas2.start();

	// loop through the image rows
#pragma omp parallel for
	for (int row = 0; row < myHeight; row++) {
		// slow the processing to simulate a very large image
		canvas2.sleep();
		// loop through the image columns
		for (int col = 0; col < myWidth; col++) {
			// read the pixel at canvas1[row][col]
			ColorInt pixelColor = myCanvas1.getPixel(row, col);
			// compute its inverse
			int invertedR = 255 - pixelColor.R;
			int invertedG = 255 - pixelColor.G;
			int invertedB = 255 - pixelColor.B;
			// draw the inverse at the same spot in canvas2
			canvas2.drawPixel(row, col,
					ColorInt(invertedR, invertedG, invertedB));
		} // inner for
	} // outer for

	// compute and display the time difference
	double totalTime = omp_get_wtime() - startTime;
	cout << "\n\nImage inversion took " << totalTime << " seconds.\n" << endl;

	//save converted image
	canvas2.takeScreenShot();
	canvas2.wait();
} // invertImage

void ImageConverter::invertImage2() {

	Canvas canvas3(myWidth + 50, 0, myWidth, myHeight,
			myImageFileName + " Inverted, Chunk-Size 1");
	canvas3.start();

	// launch additional threads
#pragma omp parallel
	{
		// how many workers do we have?
		unsigned numThreads = omp_get_num_threads();
		// which one am I?
		unsigned id = omp_get_thread_num();

		// loop through the image rows
		for (int row = id; row < myHeight; row += numThreads) {
			// slow the processing to simulate a very large image
			canvas3.sleep();
			// loop through the image columns
			for (int col = 0; col < myWidth; col++) {
				// read the pixel at canvas1[row][col]
				ColorInt pixelColor = myCanvas1.getPixel(row, col);
				// compute its inverse
				int invertedR = 255 - pixelColor.R;
				int invertedG = 255 - pixelColor.G;
				int invertedB = 255 - pixelColor.B;
				// draw the inverse at the same spot in canvas2
				canvas3.drawPixel(row, col,
						ColorInt(invertedR, invertedG, invertedB));
			} // inner for
		} // outer for
	} // #pragma omp parallel

	canvas3.wait();
} // invertImage2

void ImageConverter::invertImage3() {

	Canvas canvas4(myWidth + 50, 0, myWidth, myHeight,
			myImageFileName + " Inverted, Equal-Sized Chunks ");
	canvas4.start();

	// launch additional threads
#pragma omp parallel
	{
		// how many workers do we have?
		unsigned numThreads = omp_get_num_threads();
		// which one am I?
		unsigned id = omp_get_thread_num();

		// compute size of chunks (iterations % numThreads may != 0)
		double iterations = myHeight;
		unsigned chunkSize = (unsigned) ceil(iterations / numThreads);

		// compute starting and stopping index values
		int start = id * chunkSize;
		int stop = 0;
		if (id < numThreads - 1) {
			stop = start + chunkSize;
		} else {
			stop = myHeight;
		}

		// loop through image rows in equal-sized chunks
		for (int row = start; row < stop; row++) {
			// slow the processing to simulate a very large image
			canvas4.sleep();
			// loop through the image columns
			for (int col = 0; col < myWidth; col++) {
				// read the pixel at canvas1[row][col]
				ColorInt pixelColor = myCanvas1.getPixel(row, col);
				// compute its inverse
				int invertedR = 255 - pixelColor.R;
				int invertedG = 255 - pixelColor.G;
				int invertedB = 255 - pixelColor.B;
				// draw the inverse at the same spot in canvas2
				canvas4.drawPixel(row, col,
						ColorInt(invertedR, invertedG, invertedB));
			} // inner for
		} // outer for
	} // #pragma omp parallel

	canvas4.wait();
} // invertImage3

/*
 * main.cpp is a driver for an ImageConverter program
 *  using OpenMP to parallelize the image processing
 *  and TSGL to view the processing in near real time.
 *
 * Author: Joel Adams, for CS 112 at Calvin College.
 * Date: March 2015.
 * Revised: November 2016.
 */

#include "ImageConverter.h"

int main() {
	omp_set_num_threads(8);

	ImageConverter iConverter("pics/beads.jpg", 800, 800);
//	iConverter.invertImage();
//	iConverter.invertImage2();
//	iConverter.invertImage3();
	iConverter.lighten();
	iConverter.flipHoriz();
}
mrn6@kay:~/workspace/112/proj10$ cd Ddeb   ebug
mrn6@kay:~/workspace/112/proj10/Debug$ cd ..
mrn6@kay:~/workspace/112/proj10$ C ccd    d Debug
mrn6@kay:~/workspace/112/proj10/Debug$ ls
makefile  objects.mk  sources.mk  subdir.mk
mrn6@kay:~/workspace/112/proj10/Debug$ cd ..
mrn6@kay:~/workspace/112/proj10$ mke  ake all
make: Nothing to be done for 'all'.
mrn6@kay:~/workspace/112/proj10$ ./main


Image lightening took 1.68792 seconds.



Image flip took 1.68662 seconds.


ImageConverter terminated normally.
mrn6@kay:~/workspace/112/proj10$ exit

Script done on Mon 05 Dec 2016 02:54:05 PM EST
