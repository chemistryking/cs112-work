Script started on Mon 07 Nov 2016 04:50:29 PM EST
mrn6@babbage:~/workspace/112/proj7$ ls
cats.txt	 ReversePoem.h		Stack.h		 typescript
Debug		 ReversePoemTester.cpp	StackTester.cpp  worstdayever.txt
main.cpp	 ReversePoemTester.h	StackTester.h
ReversePoem.cpp  StackException.h	tester.cpp
mrn6@babbage:~/workspace/112/proj7$ cat *
Cats
Leo J. Smada

I love it when cats rub against me.
I could never say
I hate those purring felines.
cat: Debug: Is a directory
/* main.cpp
 * ...
 */

#include "ReversePoem.h"
#include <iostream>
using namespace std;

int main() {
	cout << "\nEnter the name of the poem file: ";
	string poemFile;
	cin >> poemFile;

	ReversePoem reversePoem(poemFile);
	cout << reversePoem.getTitle() << "\n" << reversePoem.getAuthor() << "\n"
			<< "\n*** Top-To-Bottom ***\n\n" << reversePoem.getBody()
			<< "\n\n*** Bottom-To-Top ***\n\n" << reversePoem.getBodyReversed()
			<< endl;
}
/*
 * ReversePoem.cpp
 *
 *  Created on: Nov 1, 2016
 *      Author: mrn6
 */

#include "ReversePoem.h"

/* Creates an fstream to a file with a reverse-poem stored in it. We assume that the title
 * is the first line, the author is the second line, and starting at the fourth line is the
 * actual body of the poem. We read in all the lines, one at a time, storing them both into
 * the string body, an instance variable, and into a stack. Then, we finally pop all the elements
 * of the stack into the string bodyreversed, an instance variable.
 */

ReversePoem::ReversePoem(string fileName) {
	ifstream fin(fileName.c_str());
	assert(fin.is_open());
	//assuming the first line is not empty, is the title
	getline(fin, title);
	//assuming the second line is not empty, is the author
	getline(fin, author);
	Stack<string> poem(1);
	string temp;
	getline(fin,temp); // getting rid of the empty line between author and the body
	while (!fin.eof()) {
		getline(fin, temp);
		body += temp;
		body += '\n';
		try {
			poem.push(temp);
		} catch (StackException& se) {
			poem.setCapacity(poem.getCapacity() * 2);
			poem.push(temp);
		}
	}
	int tempSize = poem.getSize();
	for (int i = 0; i < tempSize; i++) {
		bodyReversed += poem.pop();
		bodyReversed += '\n';
	}
}

/*
 * ReversePoem.h
 *
 *  Created on: Nov 1, 2016
 *      Author: mrn6
 */

#ifndef REVERSEPOEM_H_
#define REVERSEPOEM_H_

#include <iostream>
#include <fstream>
#include <cassert>
#include "Stack.h"
using namespace std;

class ReversePoem {
public:
	ReversePoem(string fileName);
	string getTitle() const {return title;}
	string getAuthor() const {return author;}
	string getBody() const {return body;}
	string getBodyReversed() const {return bodyReversed;}
private:
	string title;
	string author;
	string body;
	string bodyReversed;
};

#endif /* REVERSEPOEM_H_ */
/*
 * ReversePoemTester.cpp
 *
 *  Created on: Nov 7, 2016
 *      Author: mrn6
 */

#include "ReversePoemTester.h"

void ReversePoemTester::runTests() {
	cout << "Testing ReversePoem..." << endl;
	testConstructor();
	testGetTitle();
	testGetAuthor();
	testGetBody();
	testGetBodyReversed();
	cout << "All tests passed! " << endl;
}

void ReversePoemTester::testConstructor() {
	cout << "Testing Constructor..." << flush;
	ReversePoem rp1("cats.txt");
	assert(rp1.getTitle()=="Cats");
	assert(rp1.getAuthor()=="Leo J. Smada");
	assert(rp1.getBody() == "I love it when cats rub against me.\n"
				"I could never say\nI hate those purring felines.\n\n");
	assert(rp1.getBodyReversed() == "\nI hate those purring felines.\n"
				"I could never say\n"
				"I love it when cats rub against me.\n");
	cout << " 1 " << flush;
	ReversePoem rp2("worstdayever.txt");
	assert(rp2.getTitle() == "Worst Day Ever?");
	assert(rp2.getAuthor() == "Chanie Gorkin");
	assert(rp2.getBody() == "Today was the absolute worst day ever"
				"\nAnd don't try to convince me that"
				"\nThere's something good in every day"
				"\nBecause, when you take a closer look"
				"\nThis world is a pretty evil place"
				"\nEven if"
				"\nSome goodness does shine through once in a while"
				"\nSatisfaction and happiness don't last"
				"\nAnd it's not true that"
				"\nIt's all in the mind and heart"
				"\nBecause"
				"\nTrue happiness can be obtained"
				"\nOnly if one's surroundings are good"
				"\nIt's not true that good exists"
				"\nI'm sure you can agree that"
				"\nThe reality"
				"\nCreates"
				"\nMy attitude"
				"\nIt's all beyond my control"
				"\nAnd you'll never in a million years hear me say that"
				"\nToday was a good day\n\n");
	assert(rp2.getBodyReversed() == "\nToday was a good day"
				"\nAnd you'll never in a million years hear me say that"
				"\nIt's all beyond my control"
				"\nMy attitude"
				"\nCreates"
				"\nThe reality"
				"\nI'm sure you can agree that"
				"\nIt's not true that good exists"
				"\nOnly if one's surroundings are good"
				"\nTrue happiness can be obtained"
				"\nBecause"
				"\nIt's all in the mind and heart"
				"\nAnd it's not true that"
				"\nSatisfaction and happiness don't last"
				"\nSome goodness does shine through once in a while"
				"\nEven if"
				"\nThis world is a pretty evil place"
				"\nBecause, when you take a closer look"
				"\nThere's something good in every day"
				"\nAnd don't try to convince me that"
				"\nToday was the absolute worst day ever\n");
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void ReversePoemTester::testGetTitle() {
	cout << "Testing getTitle()..." << flush;
	//testing with cats first...
	ifstream fin1("cats.txt");
	ReversePoem rp1("cats.txt");
	string temp;
	getline(fin1, temp);
	assert(rp1.getTitle() == temp);
	assert(rp1.getTitle() == "Cats");
	cout << " 1 " << flush;
	//testing with our second poem, Worst Day Ever
	ifstream fin2("worstdayever.txt");
	ReversePoem rp2("worstdayever.txt");
	getline(fin2, temp);
	assert(rp2.getTitle() == temp);
	assert(rp2.getTitle() == "Worst Day Ever?");
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void ReversePoemTester::testGetAuthor() {
	cout << "Testing getAuthor()..." << flush;
	//testing with cats first...
	ifstream fin1("cats.txt");
	ReversePoem rp1("cats.txt");
	string temp;
	getline(fin1, temp);
	getline(fin1, temp);
	assert(rp1.getAuthor() == temp);
	assert(rp1.getAuthor() == "Leo J. Smada");
	cout << " 1 " << flush;
	//testing with our second poem, Worst Day Ever
	ifstream fin2("worstdayever.txt");
	ReversePoem rp2("worstdayever.txt");
	getline(fin2, temp);
	getline(fin2, temp);
	assert(rp2.getAuthor() == temp);
	assert(rp2.getAuthor() == "Chanie Gorkin");
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void ReversePoemTester::testGetBody() {
	cout << "Testing getBody()..." << flush;
	//testing with cats first...
	ReversePoem rp1("cats.txt");
	string temp;
	assert(rp1.getBody() == "I love it when cats rub against me.\n"
			"I could never say\nI hate those purring felines.\n\n");
	cout << " 1 " << flush;
	//testing with our second poem, Worst Day Ever
	ReversePoem rp2("worstdayever.txt");
	assert(rp2.getBody() == "Today was the absolute worst day ever"
			"\nAnd don't try to convince me that"
			"\nThere's something good in every day"
			"\nBecause, when you take a closer look"
			"\nThis world is a pretty evil place"
			"\nEven if"
			"\nSome goodness does shine through once in a while"
			"\nSatisfaction and happiness don't last"
			"\nAnd it's not true that"
			"\nIt's all in the mind and heart"
			"\nBecause"
			"\nTrue happiness can be obtained"
			"\nOnly if one's surroundings are good"
			"\nIt's not true that good exists"
			"\nI'm sure you can agree that"
			"\nThe reality"
			"\nCreates"
			"\nMy attitude"
			"\nIt's all beyond my control"
			"\nAnd you'll never in a million years hear me say that"
			"\nToday was a good day\n\n");
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void ReversePoemTester::testGetBodyReversed() {
	cout << "Testing getBodyReversed()..." << flush;
	//testing with cats first...
	ReversePoem rp1("cats.txt");
	string temp;
	assert(rp1.getBodyReversed() == "\nI hate those purring felines.\n"
			"I could never say\n"
			"I love it when cats rub against me.\n");
	cout << " 1 " << flush;
	//testing with our second poem, Worst Day Ever
	ReversePoem rp2("worstdayever.txt");
	assert(rp2.getBodyReversed() == "\nToday was a good day"
			"\nAnd you'll never in a million years hear me say that"
			"\nIt's all beyond my control"
			"\nMy attitude"
			"\nCreates"
			"\nThe reality"
			"\nI'm sure you can agree that"
			"\nIt's not true that good exists"
			"\nOnly if one's surroundings are good"
			"\nTrue happiness can be obtained"
			"\nBecause"
			"\nIt's all in the mind and heart"
			"\nAnd it's not true that"
			"\nSatisfaction and happiness don't last"
			"\nSome goodness does shine through once in a while"
			"\nEven if"
			"\nThis world is a pretty evil place"
			"\nBecause, when you take a closer look"
			"\nThere's something good in every day"
			"\nAnd don't try to convince me that"
			"\nToday was the absolute worst day ever\n");
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

/*
 * ReversePoemTester.h
 *
 *  Created on: Nov 7, 2016
 *      Author: mrn6
 */

#ifndef REVERSEPOEMTESTER_H_
#define REVERSEPOEMTESTER_H_

#include <cassert>
#include <iostream>
#include <fstream>
#include "ReversePoem.h"
using namespace std;

class ReversePoemTester {
public:
	void runTests();
	void testConstructor();
	void testGetTitle();
	void testGetAuthor();
	void testGetBody();
	void testGetBodyReversed();
};

#endif /* REVERSEPOEMTESTER_H_ */
/* StackException.h models exceptions in stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Matthew Nykamp
 * Date: 11-01-16
 */

#ifndef STACK_EXCEPTION
#define STACK_EXCEPTION

#include <iostream>
using namespace std;

 
class StackException {
public:
   StackException(const string& whereThrown,
                  const string& message) { 
       myLocation = whereThrown; 
       myMessage = message; 
   }

   string asString() const {
       return "*** StackException in " +
               myLocation + ": " + myMessage; 
   }

private:
   string myLocation;
   string myMessage;
};  // StackException


/* Function to allow a StackException (or a subclass) to be displayed
 * via an ostream.
 * Parameters: out, an ostream;
 *             se, a StackException.
 * Postcondition: the string representation of se has been inserted
 * into out
 *             && return-value == out.
 */
inline ostream& operator<<(ostream& out, const StackException& se) {
      out << se.asString();
      return out;
}

#endif

/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Matthew Nykamp
 * Date: 11-01-16
 * 
 * Invariant: myTop == 0 && isEmpty() && !isFull()
 *         || myTop == myCapacity && !isEmpty() && isFull()
 *         || myTop > 0 && myTop < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member myTop always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or getTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

#include "StackException.h"
#include <string>
#include <iostream>
using namespace std;

template<class Item>
class Stack {
public:
	Stack(unsigned size);
	Stack(const Stack& original);
	~Stack();
	Stack& operator=(const Stack& original);
	bool isEmpty() const;
	bool isFull() const;
	void push( Item add);
	Item getTop() const;
	Item pop();
	unsigned getSize() const;
	unsigned getCapacity() const;
	void setCapacity(unsigned newCapacity);
protected:
	void makeCopyOf(const Stack& original);
	
private:
	unsigned myCapacity;
	unsigned myTop;
	Item*    myArray;
	friend class StackTester;
};

/* explicit-value constructor
 * Parameter: size, an unsigned value.
 * Precondition: size > 0.
 * Postcondition: myTop == 0 && myCapacity == size
 *              && myArray contains the address of a dynamic array of 'size' entries.
 */
template<class Item>
Stack<Item>::Stack(unsigned size) {
	if (size <= 0) {
		throw StackException("Stack()", "Stack(size): size must be positive!");
	} else {
		myTop = 0;
		myCapacity = size;
		myArray = new Item[size];
	}
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
Stack<Item>::Stack(const Stack<Item>& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
void Stack<Item>::makeCopyOf(const Stack<Item>& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	myTop = original.myTop;
}

/* destructor
 * Postcondition: myCapacity == 0 && myTop == 0
 *             && myArray has been deallocated.
 */
template<class Item>
Stack<Item>::~Stack() {
	delete[] myArray;
	myArray = NULL;
	myCapacity = 0;
	myTop = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template<class Item>
Stack<Item>& Stack<Item>::operator=(const Stack<Item>& original) {
	if (this != &original) {
		delete[] myArray;
		makeCopyOf(original);
	}
	return *this;
}

// Returns true if myTop is equal to 0, or in other words:
// if the stack is empty
template<class Item>
bool Stack<Item>::isEmpty() const {
	return (myTop == 0);
}

// Returns true if myCapacity is equal to myTop, or in other words:
// if the stack is full and cannot store any more items
template<class Item>
bool Stack<Item>::isFull() const {
	return (myCapacity == myTop);
}

// Adds a new Item to the top of the stack, throwing
// and exception if the stack is full
template<class Item>
void Stack<Item>::push(Item add) {
	if(myTop==myCapacity){
		throw StackException("push()", "stack is full");
	}
	myArray[myTop] = add;
	myTop++;
}

// Returns the top Item from the stack without modifying the stack,
// throwing an exception if the stack is empty
template<class Item>
Item Stack<Item>::getTop() const {
	if (myTop > 0) {
		return myArray[myTop - 1];
	} else {
		throw StackException("getTop()", "stack is empty");
	}
}

// Returns and removes the top Item from the stack
// throwing an exception if the stack is empty
template<class Item>
Item Stack<Item>::pop() {
	if(myTop==0){
		throw StackException("pop()", "stack is empty!");
	}
	return myArray[--myTop];
}

// Returns the size of the Stack
template<class Item>
unsigned Stack<Item>::getSize() const {
	return myTop;
}

// Returns the capacity of the Stack
template<class Item>
unsigned Stack<Item>::getCapacity() const {
	return myCapacity;
}

// Sets the capacity to be newCapacity, unless
// the size is greater than newCapacity
template<class Item>
void Stack<Item>::setCapacity(unsigned newCapacity) {
	if(newCapacity < myTop) {
		throw StackException("setCapacity()", "cannot set capacity to be smaller than size!");
	} else {
		if (myCapacity!=newCapacity) {
			Item * temp = new Item[newCapacity];
			for(unsigned i = 0; i < myTop; i ++) {
				temp[i] = myArray[i];
			}
			delete[] myArray;
			myArray = temp;
			myCapacity = newCapacity;
		}
	}
}


#endif

/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 * Joel Adams, for CS 112 at Calvin College
 */

#include "StackTester.h"
#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
using namespace std;

void StackTester::runTests() {
	cout << "Testing Stack class..." << endl;
	testConstructor();
	testIsEmpty();
	testPushAndIsFull();
	testGetTop();
	testPop();
	testCopyConstructor();
	testAssignment();
	testDestructor();
	testSizeAndCapacity();
	cout << "All tests passed!" << endl;
}

void StackTester::testConstructor() {
	cout << "- Testing constructor... " << flush;
	// invalid parameter
	try {
		Stack<double>s1(0);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (StackException& se) {
		cout << se << flush;
	}
	cout << " 1 " << flush;
	// valid parameter
	Stack<double>s2(3);
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testIsEmpty() {
	cout << "- Testing isEmpty()... " << flush;
	// capacity 1
	Stack<double>s1(1);
	assert(s1.isEmpty());
	cout << " 1 " << flush;
	// capacity > 1
	Stack<double>s2(3);
	assert(s2.isEmpty());
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testPushAndIsFull() {
	cout << "- Testing push()... " << flush;
	// test with capacity 1
	Stack<double>s1(1);
	s1.push(11);
	assert(!s1.isEmpty());
	assert(s1.isFull());
	try {
		s1.push(22);
		cerr << "\npush() worked on a full stack (size 1)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 1 " << flush;
	}
	// test with capacity > 1
	Stack<double>s2(3);
	s2.push(11);
	s2.push(22);
	s2.push(33);
	try {
		s2.push(44);
		cerr << "\npush() worked on a full stack (size 3)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}

void StackTester::testGetTop() {
	cout << "- Testing getTop()... " << flush;
	// test with empty stack
	Stack<double>s1(1);
	try {
		s1.getTop();
		cerr << "\ngetTop() worked on empty stack\n";
		exit(1);
	} catch (StackException& se) {
		cout << se << endl;
		cout << " 1 " << flush;
	}
	// test with capacity 1
	Stack<double>s2(1);
	s2.push(11);
	assert(s2.getTop() == 11);
	cout << " 2 " << flush;
	// test with capacity > 1
	Stack<double>s3(3);
	s3.push(11);
	assert(s3.getTop() == 11);
	s3.push(22);
	assert(s3.getTop() == 22);
	s3.push(33);
	assert(s3.getTop() == 33);
	cout << " 3 " << flush;
	cout << " Passed! " << endl;
}

void StackTester::testPop() {
	cout << "- Testing pop()... " << flush;
	// try empty, capacity 1
	Stack<double>s1(1);
	assert(s1.isEmpty());
	try {
		s1.pop();
		cerr << "\npop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 1 " << flush;
	}
	// try empty, capacity > 1
	Stack<double>s2(3);
	try {
		s2.pop();
		cerr << "\npop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 2 " << flush;
	}
	// try non-empty, capacity 1
	Stack<double>s3(1);
	s3.push(11);
	assert(s3.getTop() == 11);
	assert(s3.pop() == 11);
	try {
		s3.pop();
		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 3 " << flush;
	}
	// try non-empty, capacity > 1
	Stack<double>s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	assert(s4.getTop() == 33);
	assert(s4.pop() == 33);
	assert(s4.getTop() == 22);
	assert(s4.pop() == 22);
	assert(s4.getTop() == 11);
	assert(s4.pop() == 11);
	try {
		s4.pop();
		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 4 " << flush;
	}
	cout << " Passed!" << endl;
}

void StackTester::testCopyConstructor() {
	cout << "- Testing copy constructor... " << flush;
	// minimal empty Stack
	Stack<double>s1(1);
	Stack<double>s2(s1);
	assert(s2.isEmpty());
	assert(s2.myArray != NULL);
	assert(s2.myCapacity == 1);
	assert(s2.myArray != s1.myArray);
	cout << " 1 " << flush;
	// minimal non-empty Stack
	Stack<double>s3(1);
	s3.push(11);
	Stack<double>s4(s3);
	assert(!s4.isEmpty());
	assert(s4.isFull());
	assert(s4.getTop() == 11);
	assert(s4.myArray != s3.myArray);
	cout << " 2 " << flush;
	// non-minimal, non-empty stack
	Stack<double>s5(3);
	s5.push(11);
	s5.push(22);
	s5.push(33);
	Stack<double>s6(s5);
	assert(s6.myCapacity == s5.myCapacity);
	assert(s6.myTop == s5.myTop);
	assert(s6.myArray != s5.myArray);
	assert(s6.pop() == 33);
	assert(s6.pop() == 22);
	assert(s6.pop() == 11);
	assert(s5.getTop() == 33);
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testAssignment() {
	cout << "- Testing assignment... " << flush;
	// minimal empty Stacks, same size
	Stack<double>s1(1);
	Stack<double>s2(1);
	s2 = s1;
	assert(s2.isEmpty());
	assert(s2.myArray != NULL);
	assert(s2.myArray != s1.myArray);
	assert(s2.myCapacity == 1);
	cout << " 1 " << flush;
	// minimal non-empty Stack to empty Stack, same capacity
	Stack<double>s3(1);
	s3.push(11);
	Stack<double>s4(1);
	s4 = s3;
	assert(!s4.isEmpty());
	assert(s4.isFull());
	assert(s4.getTop() == 11);
	assert(s4.myArray != s3.myArray);
	cout << " 2 " << flush;
	// minimal empty stack to non-empty stack, same capacity
	Stack<double>s5(1);
	Stack<double>s6(1);
	s6.push(11);
	s6 = s5;
	assert(s6.isEmpty());
	assert(s6.myArray != NULL);
	assert(s6.myArray != s5.myArray);
	assert(s6.myCapacity == 1);
	cout << " 3 " << flush;
	// non-minimal non-empty stack to empty stack, different capacities
	Stack<double>s7(3);
	s7.push(11);
	s7.push(22);
	s7.push(33);
	Stack<double>s8(2);
	s8 = s7;
	assert(s8.myArray != s7.myArray);
	assert(s8.myCapacity == s7.myCapacity);
	assert(s8.myTop == s7.myTop);
	assert(s8.pop() == 33);
	assert(s8.pop() == 22);
	assert(s8.pop() == 11);
	assert(s7.getTop() == 33);
	cout << " 4 " << flush;
	// non-minimal, empty stack to non-empty stack, different capacities
	Stack<double>s9(2);
	Stack<double>s10(3);
	s10.push(11);
	s10.push(22);
	s10.push(33);
	s10 = s9;
	assert(s10.isEmpty());
	assert(s10.myArray != s9.myArray);
	assert(s10.myCapacity == s10.myCapacity);
	cout << " 5 " << flush;
	// self-assignment, minimal size
	Stack<double>s11(1);
	s11.push(11);
	s11 = s11;
	assert(s11.isFull());
	assert(!s11.isEmpty());
	cout << " 6 " << flush;
	// chaining
	Stack<double>s12(2);
	s12.push(11);
	s12.push(22);
	Stack<double>s13(1);
	Stack<double>s14(1);
	s14 = s13 = s12;
	assert(s14.isFull());
	assert(s14.myArray != s13.myArray);
	assert(s14.myArray != s12.myArray);
	assert(s14.pop() == 22);
	assert(s14.pop() == 11);
	assert(s14.isEmpty());
	cout << " 7 " << flush;
	// self-assignment, non-minimal size
	s13 = s13;
	assert(!s13.isEmpty());
	assert(s13.isFull());
	assert(s13.pop() == 22);
	assert(s13.pop() == 11);
	assert(s13.isEmpty());
	cout << " 8 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testDestructor() {
	cout << "- Testing destructor..." << flush;
	// minimal, empty
	Stack<double>s1(1);
	s1.~Stack();
	assert(s1.isEmpty());
	assert(s1.myArray == NULL);
	assert(s1.myCapacity == 0);
	cout << " 1 " << flush;
	// minimal, non-empty
	Stack<double>s2(1);
	s2.push(11);
	s2.~Stack();
	assert(s2.isEmpty());
	assert(s2.myArray == NULL);
	assert(s2.myCapacity == 0);
	cout << " 2 " << flush;
	// non-minimal, empty
	Stack<double>s3(3);
	s3.~Stack();
	assert(s3.isEmpty());
	assert(s3.myArray == NULL);
	assert(s3.myCapacity == 0);
	cout << " 3 " << flush;
	// non-minimal, non-empty
	Stack<double>s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	s4.~Stack();
	assert(s4.isEmpty());
	assert(s4.myArray == NULL);
	assert(s4.myCapacity == 0);
	cout << " 4 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testSizeAndCapacity() {
	cout << "- Testing getSize(), getCapacity(), and setCapacity()..." << flush;
	//testing getSize and getCapacity on an empty Stack
	Stack<double>s1(2);
	assert(s1.getSize() == 0);
	assert(s1.getCapacity() == 2);
	//testing getSize and getCapacity on a non-empty Stack
	s1.push(11);
	assert(s1.getSize() == 1);
	assert(s1.getCapacity() == 2);
	//testing getSize and getCapacity on a full Stack
	s1.push(22);
	assert(s1.getSize() == 2);
	assert(s1.getCapacity() == 2);
	cout << " 1a " << flush;
	//testing that the getSize and getCapacity works for different values
	Stack<double>s2(5);
	s2.push(11);
	s2.push(22);
	s2.push(33);
	assert(s2.getSize() == 3);
	assert(s2.getCapacity() == 5);
	cout << " 1b " << flush;
	//testing iteratively if the size changes and capacity remains constant
	Stack<double>s3(4000);
	for (unsigned i = 0; i < 4000; i++) {
		s3.push(i);
		assert(s3.getSize() == i + 1);
		assert(s3.getCapacity() == 4000);
	}
	cout << " 2 " << flush;
	//testing setCapacity() with an initially empty Stack
	Stack<double>s4(1);
	s4.setCapacity(23);
	assert(s4.getCapacity() == 23);
	cout << " 3 " << flush;
	//testing setCapacity() with setting the capacity to be itself
	s4.setCapacity(23);
	assert(s4.getCapacity() == 23);
	cout << " 4 " << flush;
	//testing setCapacity() with a partially filled Stack
	Stack<double>s5(14);
	for (unsigned i = 0; i < 11; i++) {
		s5.push(i);
	}
	s5.setCapacity(45);
	assert(s5.getTop() == 10);
	assert(s5.getCapacity() == 45);
	cout << " 5 " << flush;
	//testing setCapacity() with setting the capacity to be smaller than the current size
	Stack<double> s6(15);
	for (unsigned i = 0; i < 15; i++) {
		s6.push(i);
	}
	try {
		s6.setCapacity(4);
		cerr << "\ns6.setCapacity(4) worked when 4 < size!\n";
		exit(1);
	} catch (StackException& se) {
		cout << " 6 " << flush;
	}
	cout << " Passed!" << endl;
}
/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin College
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_


class StackTester {
public:
	void runTests();
	void testConstructor();
	void testIsEmpty();
	void testPushAndIsFull();
	void testGetTop();
	void testPop();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();
	void testSizeAndCapacity();
};

#endif /*STACKTESTER_H_*/

/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
//#include "StackTester.h"
//#include "ReversePoemTester.h"

//int main() {
//	StackTester st;
//	st.runTests();
//	ReversePoemTester rpt;
//	rpt.runTests();
//}

Worst Day Ever?
Chanie Gorkin

Today was the absolute worst day ever
And don't try to convince me that
There's something good in every day
Because, when you take a closer look
This world is a pretty evil place
Even if
Some goodness does shine through once in a while
Satisfaction and happiness don't last
And it's not true that
It's all in the mind and heart
Because
True happiness can be obtained
Only if one's surroundings are good
It's not true that good exists
I'm sure you can agree that
The reality
Creates
My attitude
It's all beyond my control
And you'll never in a million years hear me say that
Today was a good day
mrn6@babbage:~/workspace/112/proj7$ cd Debug
mrn6@babbage:~/workspace/112/proj7/Debug$ ls
main.d	  objects.mk	 ReversePoem.o	      sources.mk     subdir.mk
main.o	  proj7		 ReversePoemTester.d  StackTester.d  tester.d
makefile  ReversePoem.d  ReversePoemTester.o  StackTester.o  tester.o
mrn6@babbage:~/workspace/112/proj7/Debug$ make all
make: Nothing to be done for 'all'.
mrn6@babbage:~/workspace/112/proj7/Debug$ cd ..
mrn6@babbage:~/workspace/112/proj7$ .? /Debug/
bash: ./Debug/: Is a directory
mrn6@babbage:~/workspace/112/proj7$ ./Debug/proj7

Enter the name of the poem file: cats.txt
Cats
Leo J. Smada

*** Top-To-Bottom ***

I love it when cats rub against me.
I could never say
I hate those purring felines.



*** Bottom-To-Top ***


I hate those purring felines.
I could never say
I love it when cats rub against me.

mrn6@babbage:~/workspace/112/proj7$ ./Debug/proj7

Enter the name of the poem file: wos rstdayever.txt
Worst Day Ever?
Chanie Gorkin

*** Top-To-Bottom ***

Today was the absolute worst day ever
And don't try to convince me that
There's something good in every day
Because, when you take a closer look
This world is a pretty evil place
Even if
Some goodness does shine through once in a while
Satisfaction and happiness don't last
And it's not true that
It's all in the mind and heart
Because
True happiness can be obtained
Only if one's surroundings are good
It's not true that good exists
I'm sure you can agree that
The reality
Creates
My attitude
It's all beyond my control
And you'll never in a million years hear me say that
Today was a good day



*** Bottom-To-Top ***


Today was a good day
And you'll never in a million years hear me say that
It's all beyond my control
My attitude
Creates
The reality
I'm sure you can agree that
It's not true that good exists
Only if one's surroundings are good
True happiness can be obtained
Because
It's all in the mind and heart
And it's not true that
Satisfaction and happiness don't last
Some goodness does shine through once in a while
Even if
This world is a pretty evil place
Because, when you take a closer look
There's something good in every day
And don't try to convince me that
Today was the absolute worst day ever

mrn6@babbage:~/workspace/112/proj7$ exit

Script done on Mon 07 Nov 2016 04:51:35 PM EST
