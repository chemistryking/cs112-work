Script started on Mon 10 Oct 2016 04:29:38 PM EDT
mrn6@chomsky:~/workspace/112/proj4$ ls
Application.cpp     Matrix.h		  MatrixTester.cpp  Vec.h
Application.h	    MatrixTest1Copy2.txt  MatrixTester.h
Debug		    MatrixTest1Copy.txt   tester.cpp
MatriTest1Copy.txt  MatrixTest1.txt	  typescript
mrn6@chomsky:~/workspace/112/proj4$ cat *.cpp
/*
 * Application.cpp
 *
 *  Created on: Oct 10, 2016
 *      Author: Matthew Nykamp and Peter Betten
 */

#include "Application.h"
#include <iostream>
#include <cassert>
#include <fstream>
#include "Matrix.h"
using namespace std;

Application::Application() {
}

//Allows the user to run three operations on matrices defined in
//user-entered files and displays the resultant matrix
void Application::run() {
	cout << "\nWelcome to the Matrix program!\nPlease choose an operation:\n"
			<< "1. :Addition\n2. :Subtraction:\n3. :Transpose:" << endl;
	unsigned choice;
	cin >> choice;
	string fileName1, fileName2;
	cout << "Please enter the name of the file containing the first matrix: "
			<< endl;
	cin >> fileName1;
	Matrix<double> m1, m3;
	m1.readFrom(fileName1);
	if (choice == 1) {
		cout
				<< "Please enter the name of the file containing the second matrix: "
				<< endl;
		cin >> fileName2;
		Matrix<double> m2;
		m2.readFrom(fileName2);
		m3 = m1 + m2;
	} else if (choice == 2) {
		cout
				<< "Please enter the name of the file containing the second matrix: "
				<< endl;
		cin >> fileName2;
		Matrix<double> m2;
		m2.readFrom(fileName2);
		m3 = m1 - m2;
	} else if (choice == 3) {

		m3 = m1.getTranspose();
	}
	cout << "The resultant matrix is:\n[";
	for(unsigned i = 0; i < m3.getRows(); i ++) {
		for(unsigned j = 0; j < m3.getColumns(); j ++) {
			if(j != m3.getColumns()-1){
				cout << m3[i][j] << ", ";
			}
			else{
				cout << m3[i][j];
			}
		}
		if(i != m3.getRows()-1) {
			cout << endl;
		}
	}
	cout << "]" << endl;
}
/* MatrixTester.cpp defines test-methods for class Matrix.
 * Joel Adams, for CS 112 at Calvin College.
 */

#include "MatrixTester.h"
#include <iostream>        // cout, cerr, ...
#include <cstdlib>         // exit()
#include <stdexcept>       // range_error, ...
using namespace std;

void MatrixTester::testDefaultConstructor() {
	cout << "Testing default constructor..." << flush;
	Matrix<double> m1;
	assert(m1.getRows() == 0);
	assert(m1.getColumns() == 0);
	cout << " 0 " << flush;

	Matrix<double> m2;
	assert(m2.getRows() == 0);
	assert(m2.getColumns() == 0);
	cout << " 1 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testExplicitConstructor() {
	cout << "Testing explicit constructor..." << flush;
	Matrix<double> m1(2, 3);

	assert( m1.getColumns() == 3 );
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1.myVec[i][j] == 0 );
		}
	}
	cout << " 1 " << flush;

	Matrix<double> m2(3, 1);
	assert( m2.getRows() == 3 );
	assert( m2.getColumns() == 1 );
	for (unsigned i = 0; i < m2.getRows(); i++) {
		for (unsigned j = 0; j < m2.getColumns(); j++) {
			assert( m2.myVec[i][j] == 0 );
		}
	}
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty Matrix<double>
	Matrix<double> m1;
	Matrix<double> m2 = Matrix<double>(m1);
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	assert( m2.myVec.getSize() == 0 );
	cout << " 1 " << flush;

	// copy non-empty Matrix<double>
	Matrix<double> m3(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3.myVec[i][j] = i+j;
		}
	}
	Matrix<double> m4 = Matrix<double>(m3);
	assert( m4.getRows() == m3.getRows() );
	assert( m4.getColumns() == m3.getColumns() );
	assert( m4.myVec.getSize() == m3.myVec.getSize() );
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			assert( m4.myVec[i][j] == i+j );
		}
	}
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

void MatrixTester::testAssignment() {
	cout << "Testing =... " << flush;
	// empty to empty
	Matrix<double> m0;
	Matrix<double> m1;
	m0 = m1;
	assert( m0.getRows() == 0 );
	assert( m0.getColumns() == 0 );
	assert( m0.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty to empty
	Matrix<double> m2(2,3);
	m0 = m2;
	assert( m0.getRows() == 2 );
	assert( m0.getColumns() == 3 );
	assert( m0.myVec == m2.myVec );
	cout << " 1 " << flush;

	// empty to nonempty
	m2 = m1;
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	assert( m2.myVec == m1.myVec );
	cout << " 2 " << flush;

	// non-empty to non-empty
	Matrix<double> m3(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
		}
	}
	Matrix<double> m4(5, 4);
	m4 = m3;
	assert( m4.getRows() == 2 );
	assert( m4.getColumns() == 3 );
	assert( m4.myVec == m3.myVec );
	cout << " 3 " << flush;

	// chaining
	Matrix<double> m5;
	m5 = m0 = m4;
	assert( m0.getRows() == 2 );
	assert( m0.getColumns() == 3 );
	assert( m0.myVec == m4.myVec );
	assert( m5.getRows() == 2 );
	assert( m5.getColumns() == 3 );
	assert( m5.myVec == m0.myVec );
	cout << " 4 " << flush;

	// self-assignment
	m5 = m5;
	assert( m5.getRows() == 2 );
	assert( m5.getColumns() == 3 );
	for (unsigned i = 0; i < m5.getRows(); i++) {
		for (unsigned j = 0; j < m5.getColumns(); j++) {
			assert( m5[i][j] == i+j );
		}
	}
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testEquality() {
	cout << "Testing ==... " << flush;
	// empty
	Matrix<double> m1;
	Matrix<double> m2;
	assert( m1 == m2 );
	cout << " 1 " << flush;

	// same sized
	Matrix<double> m3(2, 3);
	Matrix<double> m4a(2, 3);
	Matrix<double> m4b(2, 3);
	Matrix<double> m5(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
			m4a[i][j] = i+j;
			m4b[i][j] = i+j;
			m5[i][j] = i*j;
		}
	}
	assert( m3 == m4a );
	assert( !(m1 == m3) );
	assert( !(m3 == m5) );
	m4b[1][1] = 0;
	assert( !(m3 == m4b) );
	cout << " 2 " << flush;

	// different row sizes
	Matrix<double> m6(3,3);
	Matrix<double> m7(2,3);
	assert( !(m6 == m7) );
	cout << " 3 " << flush;

	// same row sizes, different column sizes
	Matrix<double> m8(2,4);
	assert( !(m8 == m7 ) );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testReadSubscript(const Matrix<double>& mat) {
	for (unsigned i = 0; i < mat.getRows(); i++) {
		for (unsigned j = 0; j < mat.getColumns(); j++) {
			assert( i*j == mat[i][j] );
		}
	}
}

void MatrixTester::testSubscripts() {
	cout << "Testing subscripts... " << flush;
	Matrix<double> m(4, 3);
	// test write-subscript
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			m[i][j] = i*j;
		}
	}
	cout << " 1 " << flush;

	// test read-subscript -- see above
	testReadSubscript(m);
	cout << " 2 " << flush;

	// exceptions
	// empty Matrix<double>
	Matrix<double> m0;

	// read subscript
	try {
		double value = m0[0][0];
		cerr << "successfully read from empty Matrix<double>";
		exit(1);
	} catch (range_error&) {
		cout << " 3 " << flush;
 	}

	// write subscript
	try {
		m0[0][0] = 0;
		cerr << "successfully wrote to empty Matrix<double>";
		exit(1);
	} catch (range_error&) {
		cout << " 4 " << flush;
 	}

	// nonempty Matrix<double>
	Matrix<double> m2(2,3);

	// beyond last row
	try {
		m2[2][0] = 0;
		cerr << "successfully wrote past last Matrix<double> row";
		exit(1);
	} catch (range_error&) {
		cout << " 5 " << flush;
 	}

	// beyond last column
	try {
		m2[0][3] = 0;
		cerr << "successfully wrote past last Matrix<double> column";
		exit(1);
	} catch (range_error&) {
		cout << " 6 " << flush;
 	}

	cout << "Passed!" << endl;
}


void MatrixTester::testInequality() {
	cout << "Testing !=... " << flush;

	// empty
	Matrix<double> m1;
	Matrix<double> m2;
	assert( !(m1 != m2) );
	cout << " 0 " << flush;

	// nonempty, same size
	Matrix<double> m3(2, 3);
	Matrix<double> m4(2, 3);
	Matrix<double> m5(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
			m4[i][j] = i+j;
			m5[i][j] = i*j;
		}
	}
	assert( !(m3 != m4) );
	assert( m1 != m3 );
	assert( m3 != m5 );
	cout << " 1 " << flush;

	// nonempty, different row sizes
	Matrix<double> m6(3,3);
	for (unsigned i = 0; i < m6.getRows(); i++) {
		for (unsigned j = 0; j < m6.getColumns(); j++) {
			m6[i][j] = i+j;
		}
	}
	assert( m3 != m6 );
	cout << " 2 " << flush;

	// nonempty, different column sizes
	Matrix<double> m7(2, 4);
	for (unsigned i = 0; i < m7.getRows(); i++) {
		for (unsigned j = 0; j < m7.getColumns(); j++) {
			m7[i][j] = i+j;
		}
	}
	assert( m3 != m7 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testTranspose() {
	cout << "Testing getTranspose()... " << flush;
	// empty
	Matrix<double> m0a, m0b(2,3);
	m0b = m0a.getTranspose();
	assert( m0b.getRows() == 0 );
	assert( m0b.getColumns() == 0 );
	assert( m0b.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty
	Matrix<double> m1(4, 3);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
		}
	}
	Matrix<double> m2 = m1.getTranspose();
	assert( m2.getRows() == m1.getColumns() );
	assert( m2.getColumns() == m1.getRows() );
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m2[j][i] == m1[i][j] );
		}
	}
	cout << " 1a " << flush;
	// check that m1 is unchanged
	for (unsigned i = 0 ; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testAddition() {
	cout << "Testing +... " << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a + m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty, same size
	Matrix<double> m1(3, 4);
	Matrix<double> m2(3, 4);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
			m2[i][j] = i+j;
		}
	}

	Matrix<double> m3 = m1 + m2;

	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m3[i][j] == i*j + i+j );
		}
	}
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	// nonempty, different sized rows
	Matrix<double> m4(4,4);
	try {
		m3 = m2 + m4;
		cerr << "operator+ worked with different row sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 2 " << flush;
	}

	// nonempty, different sized columns
	Matrix<double> m5(3,3);
	try {
		m3 = m2 + m5;
		cerr << "operator+ worked with different column	sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testSubtraction() {
	cout << "Testing -... " << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a - m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	//non-empty, valid
	Matrix<double> m1(3, 4);
	Matrix<double> m2(3, 4);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
			m2[i][j] = i+j;
		}
	}

	Matrix<double> m3 = m1 - m2;
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m3[i][j] == m1[i][j] - m2[i][j] );
		}
	}
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	// nonempty, different sized rows
	Matrix<double> m4(4,4);
	try {
		m3 = m2 - m4;
		cerr << "operator- worked with different row sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 2 " << flush;
	}

	// nonempty, different sized columns
	Matrix<double> m5(3,3);
	try {
		m3 = m2 - m5;
		cerr << "operator- worked with different column	sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}

	cout << "Passed!" << endl;
}

//void Matrix<double>Tester::testMultiply() {
//	cout << "Testing *..." << flush;
//	// empty
//	Matrix<double> m0a, m0b, m0c(3,2);
//	m0c = m0a * m0b;
//	assert( m0c.getRows() == 0 );
//	assert( m0c.getColumns() == 0 );
//	assert( m0c.myVec.getSize() == 0 );
//	cout << " 0 " << flush;
//
//	Matrix<double> m1(2, 3);
//	Matrix<double> m2(3, 2);
//	for (unsigned i = 0; i < m1.getRows(); i++) {
//		for (unsigned j = 0; j < m1.getColumns(); j++) {
//			m1[i][j] = i+j+1;
//			m2[j][i] = i+j+1;
//		}
//	}
//	
//	Matrix<double> m3 = m1 * m2;
//	assert( m3.getRows() == 2);
//	assert( m3.getColumns() == 2 );
//	assert( m3[0][0] == 14 );
//	assert( m3[0][1] == 20 );
//	assert( m3[1][0] == 20 );
//	assert( m3[1][1] == 29 );
//	cout << " 1a " << flush;
//	
//	// check that left operand did not change
//	for (unsigned i = 0; i < m1.getRows(); i++) {
//		for (unsigned j = 0; j < m1.getColumns(); j++) {
//			assert( m1[i][j] == i+j+1 );
//		}
//	}
//	cout << " 1b " << flush;
//
//	// nonempty, m1.columns != m2.rows
//	Matrix<double> m4(3,3);
//	try {
//		m3 = m2 * m4;
//		cerr << "operator* worked with bad row/column sizes";
//		exit(1);
//	} catch (invalid_argument&) {
//		cout << " 2 " << flush;
//	}
//
//	cout << "Passed!" << endl;
//}

void MatrixTester::testReadFromStream() {
	cout << "Testing readFrom(istream)... " << flush;
	ifstream fin("MatrixTest1.txt");
	assert( fin.is_open() );
	unsigned rows, columns;
	fin >> rows >> columns;
	Matrix<double> m(rows, columns);
	m.readFrom(fin);
	for (unsigned i = 0; i < rows; i++) {
		for (unsigned j = 0; j < columns; j++) {
			assert( m[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testReadFromFile() {
	cout << "Testing readFrom(string)... " << flush;
	Matrix<double> m;
	m.readFrom("MatrixTest1.txt");
	assert( m.getRows() == 3 );
	assert( m.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testWriteToStream() {
	cout << "Testing writeTo(ostream)... " << flush;
	Matrix<double> m;
	// read a Matrix<double> whose values we know
	m.readFrom("MatrixTest1.txt");
	ofstream fout("MatriTest1Copy.txt");
	assert( fout.is_open() );
	// now write it to a file via a stream
	fout << m.getRows() << " " << m.getColumns() << "\n";
	m.writeTo(fout);
	fout.close();
	// now, read what we just wrote into a different Matrix<double>
	Matrix<double> m1;
	m1.readFrom("MatrixTest1Copy.txt");
	// and test it
	assert( m1.getRows() == 3 );
	assert( m1.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m1[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testWriteToFile() {
	cout << "Testing writeTo(string)... " << flush;
	Matrix<double> m;
	// read in a Matrix<double> whose values we know
	m.readFrom("MatrixTest1.txt");
	// write it to a file
	m.writeTo("MatrixTest1Copy2.txt");
	// now, read what we just wrote into a different Matrix<double>
	Matrix<double> m1;
	m1.readFrom("MatrixTest1Copy2.txt");
	// test it
	assert( m1.getRows() == 3 );
	assert( m1.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m1[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::runTests() {
	cout << "Running Matrix tests..." << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testSubscripts();
	testInequality();
	testTranspose();
	testAddition();
	testSubtraction();
//	testMultiply();
	testReadFromStream();
	testWriteToStream();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

/* tester.cpp drives the testing of our Vec template and Matrix class.
 * Student: Matthew Nykamp
 * Date: 10-04-16
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "MatrixTester.h"
#include "Application.h"

int main() {
//	VecTester vt;
//	vt.runTests();
	MatrixTester mt;
	mt.runTests();
	Application a;
	a.run();
}
mrn6@chomsky:~/workspace/112/proj4$ cat *.h
/*
 * Application.h
 *
 *  Created on: Oct 10, 2016
 *      Author: Matthew Nykamp and Peter Betten
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_

class Application {
private:

public:
	Application();
	void run();
};



#endif /* APPLICATION_H_ */
/* Matrix.h provides a class for manipulating 2-dimensional vectors.
 * Student Name: Matthew Nykamp and Peter Betten
 * Date: 10-04-16
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 *
 * Methods by Matthew: operator!=, readFrom(istream), writeTo(string), operator+()
 * Methods by Peter: writeTo(), readFrom(string), operator-(), getTranspose()
 */

#ifndef MATRIX_H_
#define MATRIX_H_

#include "Vec.h"
#include "Matrix.h"
#include <fstream>
#include <iostream>
#include <cassert>
using namespace std;


template<class Item>
class Matrix {
public:
	Matrix();
	Matrix(unsigned rows, unsigned cols);
	unsigned getRows() const {return myRows;};
	unsigned getColumns() const {return myColumns;};
	Vec<Item>& operator[](unsigned);
	const Vec<Item>& operator[](unsigned) const;
	bool operator==(const Matrix<Item>&) const;
	bool operator!=(const Matrix<Item>&) const;
	void readFrom(istream&);
	void writeTo(string) const;
	void readFrom(string);
	void writeTo(ostream&) const;
	Matrix<Item> operator+(Matrix<Item>&);
	Matrix<Item> operator-(Matrix<Item>&);
	Matrix<Item> getTranspose();
private:
	unsigned myRows;
	unsigned myColumns;
	Vec<Vec<Item> > myVec;
	friend class MatrixTester;
};

//Default constructor
template<class Item>
Matrix<Item>::Matrix() {
	myRows = myColumns = 0;
}

//Explicit constructor
template<class Item>
Matrix<Item>::Matrix(unsigned rows, unsigned cols) {
	myRows = rows;
	myColumns = cols;
	myVec.setSize(rows);
	for (unsigned i = 0; i < rows; i++) {
		myVec[i].setSize(cols);
	}
}

//Write version of subscript operator
template<class Item>
Vec<Item>& Matrix<Item>::operator[](unsigned index) {
	if (index >= myRows) {
		throw range_error("invalid index ");
	}
	return myVec[index];
}

//Read version of subscript operator
template<class Item>
const Vec<Item>& Matrix<Item>::operator[](unsigned index) const {
	if (index >= myRows) {
		throw range_error("invalid index ");
	}
	return myVec[index];
}

//Returns true if two matrices are equal
template<class Item>
bool Matrix<Item>::operator==(const Matrix<Item>& m2) const {
	if (myRows != m2.getRows() || myColumns != m2.getColumns()) {
		return false;
	} else {
		return myVec == m2.myVec;
	}
}

//Returns true if two matrices are not equal
template<class Item>
bool Matrix<Item>::operator!=(const Matrix<Item>& m2) const {
	if (myRows == m2.getRows() && myColumns == m2.getColumns()) {
		return myVec != m2.myVec;
	}
	return true;
}

//For the current rows and columns of the matrix,
//assigns values from istream in
template<class Item>
void Matrix<Item>::readFrom(istream& in) {
	for (unsigned i = 0; i < myRows; i++) {
		for (unsigned j = 0; j < myColumns; j++) {
			in >> myVec[i][j];
		}
	}
}

//First writes the number of rows and columns to a file and then
//writes all the values in the matrix
template<class Item>
void Matrix<Item>::writeTo(string fileName) const {
	ofstream fout(fileName.c_str());
	assert(fout.is_open());
	fout << myRows << " " << myColumns << endl;

	for (unsigned i = 0; i < myRows; i++) {
		for (unsigned j = 0; j < myColumns; j++) {
			fout << myVec[i][j] << "\t";
		}
		fout << endl;
	}
}

//Reads in the size of the matrix from a file and then
//all the values from the file
template<class Item>
void Matrix<Item>::readFrom(string fileName) {
	ifstream fin(fileName.c_str());
	assert(fin.is_open());
	fin >> myRows;
	fin >> myColumns;
	myVec.setSize(myRows);
	for (unsigned i = 0; i < myRows; i++) {
		myVec[i].setSize(myColumns);
		for (unsigned j = 0; j < myColumns; j++) {
			fin >> myVec[i][j];
		}
	}
}

//Sends each value in the matrix to ostream out
template<class Item>
void Matrix<Item>::writeTo(ostream& out) const {
	for (unsigned i = 0; i < myRows; i++) {
		for (unsigned j = 0; j < myColumns; j++) {
			out << myVec[i][j] << "\t";
		}
		out << endl;
	}
}

//Adds two matrices together and returns the sum
template<class Item>
Matrix<Item> Matrix<Item>::operator+(Matrix<Item>& m2) {
	Matrix<Item> temp(myRows, myColumns);
	if (myRows == m2.myRows && myColumns == m2.myColumns) {
		for (unsigned i = 0; i < myRows; i++) {
			temp.myVec[i] = myVec[i] + m2.myVec[i];
		}
		return temp;
	}
	throw invalid_argument("Rows or columns are different sizes.");
}

//Subtracts m2 from this matrix and returns the difference
template<class Item>
Matrix<Item> Matrix<Item>::operator-(Matrix& m2) {
	Matrix<Item> temp(myRows, myColumns);
	if (myRows == m2.myRows && myColumns == m2.myColumns) {
		for (unsigned i = 0; i < myRows; i++) {
			temp.myVec[i] = myVec[i] - m2.myVec[i];
		}
		return temp;
	}
	throw invalid_argument("Rows or columns are different sizes.");
}

//Returns a matrix which is this matrix with columns and rows switched
template<class Item>
Matrix<Item> Matrix<Item>::getTranspose() {
	Matrix temp(myColumns, myRows);
	for (unsigned i = 0 ; i <  myRows ; i++) {
		for ( unsigned j = 0; j < myColumns; j++){
			temp[j][i] = myVec[i][j];

		}

	}
	return temp;

}


#endif
/* MatrixTester.h declares test-methods for class Matrix.
 * Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef MATRIXTESTER_H_
#define MATRIXTESTER_H_

#include "Matrix.h"

class MatrixTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testExplicitConstructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testInequality();
	void testSubscripts();
	void testReadSubscript(const Matrix<double>& mat);
	void testTranspose();
	void testAddition();
	void testSubtraction();
	void testMultiply();
	void testReadFromStream();
	void testReadFromFile();
	void testWriteToStream();
	void testWriteToFile();
};

#endif /*MATRIXTESTER_H_*/
/* Vec.h provides a simple vector class named Vec.
 * Student Name: Matthew Nykamp
 * Date: 9-27-16
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
using namespace std;
#include <stdexcept>
#include <fstream>
#include <cassert>

template<class Item>
class Vec {
public:
	Vec();
	Vec(unsigned);
	Vec(const Vec<Item>&);
	virtual ~Vec();
	Vec<Item>& operator=(const Vec<Item>&);
	unsigned getSize();
	void setItem(unsigned, const Item&);
	Item getItem(unsigned) const;
	void setSize(unsigned);
	bool operator==(const Vec<Item>&) const;
	void writeTo(ostream&) const;
	void readFrom(istream&);
	Item& operator[](unsigned);
	const Item& operator[](unsigned) const;
	Vec<Item> operator+(const Vec<Item>&);
	Vec<Item> operator-(const Vec<Item>&);
	double operator*(const Vec<Item>&);
	bool operator!=(const Vec<Item>& v2) const;
	void writeTo(string) const;
	void readFrom(string);
private:
	unsigned mySize;
	Item * myArray;
	friend class VecTester;
};

/* Default constructor, initializes mySize to be 0
 * and myArray to be NULL
 */
template<class Item>
Vec<Item>::Vec() {
	mySize = 0;
	myArray = NULL;
}

/*Explicit constructor for the class, sets the size to be the
 * unsigned passed in.
 */
template<class Item>
Vec<Item>::Vec(unsigned size) {
	mySize = size;
	myArray = new Item[size];
	for (int i = 0; i < size; i++) {
		myArray[i] = 0;
	}
}

/*	Copy constructor, creates a deep copy of the Vec passed in.
 *
 */
template<class Item>
Vec<Item>::Vec(const Vec<Item>& original) {
	mySize = original.mySize;
	if (mySize == 0) {
		myArray = NULL;
	} else if (mySize > 0) {
		myArray = new Item[mySize];
		for (unsigned i = 0; i < mySize; i++) {
			myArray[i] = original.myArray[i];
		}
	}

}

/* Sets the Vec to have all the same values as
 * another Vec, original, zeroes will be added if
 * original is larger than this Vec.
 */
template<class Item>
Vec<Item>& Vec<Item>::operator=(const Vec<Item>& original) {
	if (myArray == original.myArray) {
		return *this;
	}
	if (myArray != NULL) {
		delete[] myArray;
	}
	if (original.mySize == 0) {
		myArray = NULL;
		mySize = 0;
	} else if (original.mySize > 0) {
		myArray = new Item[original.mySize];
		for (unsigned i = 0; i < original.mySize; i++) {
			myArray[i] = original.myArray[i];
		}
		mySize = original.mySize;
	}
	return *this;
}

/* Returns the variable mySize, the number of
 * elements in this Vec.
 */
template<class Item>
unsigned Vec<Item>::getSize() {
	return mySize;
}

/* Sets the Item at index to be it, an Item argument.
 *
 */
template<class Item>
void Vec<Item>::setItem(unsigned index, const Item& it) {
	if (index > mySize || index < 0 || mySize == 0 || index >= mySize) {
		throw std::range_error("index out of range");
	} else {
		myArray[index] = it;
	}
}

/* Returns the Item at an unsigned argument index.
 *
 */
template<class Item>
Item Vec<Item>::getItem(unsigned index) const {
	if (index > mySize || index < 0 || mySize == 0 || index >= mySize) {
		throw std::range_error("index out of range");
	} else {
		return myArray[index];
	}
}

/* Sets the size of this Vec to be newSize, an unsigned argument.
 * If we are expanding the Vec, zeroes are added for all created elements.
 */
template<class Item>
void Vec<Item>::setSize(unsigned newSize) {
	Vec<Item> temp = *this;
	if (newSize != mySize) {
		if (newSize == 0) {
			mySize = 0;
			delete[] myArray;
			myArray = NULL;
		} else if (newSize > mySize) {
			delete[] myArray;
			myArray = new Item[newSize];
			for (int i = 0; i < mySize; i++) {
				myArray[i] = temp.getItem(i);
			}
			for (int i = mySize; i < newSize; i++) {
				myArray[i] = 0;
			}
		} else if (newSize < mySize) {
			delete[] myArray;
			myArray = new Item[newSize];
			for (int i = 0; i < newSize; i++) {
				myArray[i] = temp.getItem(i);
			}
		}
	}
	mySize = newSize;
}

/* Returns true if this Vec and v2 have the same values and size.
 *
 */
template<class Item>
bool Vec<Item>::operator==(const Vec<Item>& v2) const {
	if (mySize == v2.mySize) {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] != v2.getItem(i)) {
				return false;
			}
		}
		return true;
	}
	return false;
}

/* For every element, this method sends an Item
 * to an istream which is passed in.
 */
template<class Item>
void Vec<Item>::readFrom(istream& in) {
	for (int i = 0; i < mySize; i++) {
		in >> myArray[i];
	}
}

/* Reads in the first Item from fileName into mySize,
 * then fills myArray with Items from fileName.
 */
template<class Item>
void Vec<Item>::readFrom(string filename) {
	ifstream fin(filename.c_str());
	assert(fin.is_open());
	delete[] myArray;
	fin >> mySize;
	myArray = new Item[mySize];
	for (int i = 0; i < mySize; i++) {
		fin >> myArray[i];
	}
	fin.close();
}

/* Replaces every element with an Item read in from out, an ostream.
 *
 */
template<class Item>
void Vec<Item>::writeTo(ostream& out) const {
	for (int i = 0; i < mySize; i++) {
		out << myArray[i] << endl;
	}
}

/* First writes mySize into fileName, then
 * writes all the values of myArray into fileName.
 */
template<class Item>
void Vec<Item>::writeTo(string fileName) const {
	ofstream fout(fileName.c_str());
	assert(fout.is_open());
	fout << mySize << endl;
	for (int i = 0; i < mySize; i++) {
		fout << myArray[i] << endl;
	}
	fout.close();
}

/* Adds the elements of two vectors together, returning the result.
 * Throws an invalid argument exception if the vectors are not the same size.
 */
template<class Item>
Vec<Item> Vec<Item>::operator+(const Vec<Item>& addend) {
	if (mySize != addend.mySize) {
		throw std::invalid_argument("vectors are not the same size");
	}
	Vec<Item> temp = *this;
	for (int i = 0; i < mySize; i++) {
		temp.setItem(i, myArray[i] + addend.getItem(i));
	}
	return temp;
}

/* Subtracts the elements of two vectors together, returning the result.
 * Throws an invalid argument exception if the vectors are not the same size.
 */
template<class Item>
Vec<Item> Vec<Item>::operator-(const Vec<Item>& addend) {
	if (mySize != addend.mySize) {
		throw std::invalid_argument("vectors are not the same size");
	}
	Vec<Item> temp = *this;
	for (int i = 0; i < mySize; i++) {
		temp.setItem(i, myArray[i] - addend.getItem(i));
	}
	return temp;
}

/* Returns false if the compared against Vec
 * has a different size or if no element is the same as
 * this Vec
 */
template<class Item>
bool Vec<Item>::operator!=(const Vec<Item>& v2) const{
	unsigned a = 0;
	if (mySize == v2.mySize) {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] == v2.myArray[i]) {
				a += 1;
			}
		}
		if (a == mySize) {
			return false;
		}
	}
	return true;

}

/* Multiplies each of the elements of two Vecs together, returning the resultant Vec.
 * Throws an invalid argument exception if the Vecs are not the same size.
 */
template<class Item>
double Vec<Item>::operator*(const Vec<Item>& factor) {
	if (mySize != factor.mySize) {
		throw std::invalid_argument("vectors are not the same size");
	}
	Vec<Item> sums(mySize);
	for (int i = 0; i < mySize; i++) {
		sums.setItem(i, myArray[i] * factor.myArray[i]);
	}
	double sum = 0;
	for (int i = 0; i < mySize; i++) {
		sum += sums.getItem(i);
	}
	return sum;
}

/* Write version of the subscript operator; returns
 * the actual Item stored in myArray so it can be modified.
 */
template<class Item>
Item& Vec<Item>::operator[](unsigned index) {
	if (index >= mySize) {
		throw range_error("index out of bounds");
	}
	return myArray[index];
}

/* Read version of the subscript operator; returns the
 * value of myArray at index so it cannot be modified.
 *
 */
template<class Item>
const Item& Vec<Item>::operator[](unsigned index) const {
	if (index >= mySize) {
		throw range_error("index out of bounds");
	}
	return myArray[index];
}

/* Deallocates the memory used by this Vec,
 * sets mySize to be zero, and sets myArray
 * to be NULL.
 */
template<class Item>
Vec<Item>::~Vec() {
	delete[] myArray;
	myArray = NULL;
	mySize = 0;
}

#endif /*VEC_H_*/
mrn6@chomsky:~/workspace/112/proj4$ cd Debug
mrn6@chomsky:~/workspace/112/proj4/Debug$ ls
Application.d  makefile        MatrixTester.o  proj4	   subdir.mk  tester.o
Application.o  MatrixTester.d  objects.mk      sources.mk  tester.d
mrn6@chomsky:~/workspace/112/proj4/Debug$ make all
make: Nothing to be done for 'all'.
mrn6@chomsky:~/workspace/112/proj4/Debug$ cd ..
mrn6@chomsky:~/workspace/112/proj4$ ./Debug/proj4
Running Matrix tests...
Testing default constructor... 0  1 Passed!
Testing explicit constructor... 1  2 Passed!
Testing copy constructor...  1  2  Passed!
Testing =...  0  1  2  3  4  5 Passed!
Testing ==...  1  2  3  4 Passed!
Testing subscripts...  1  2  3  4  5  6 Passed!
Testing !=...  0  1  2  3 Passed!
Testing getTranspose()...  0  1a  1b Passed!
Testing +...  0  1a  1b  2  3 Passed!
Testing -...  0  1a  1b  2  3 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
All tests passed!

Welcome to the Matrix program!
Please choose an operation:
1. :Addition
2. :Subtraction:
3. :Transpose:
1
Please enter the name of the file containing the first matrix: 
MatrixTest1.txt
Please enter the name of the file containing the second matrix: 
MatrizT  xTest1Copy.txt
The resultant matrix is:
[2, 4, 6, 8
10, 12, 14, 16
18, 20, 22, 24]
mrn6@chomsky:~/workspace/112/proj4$ ,/Db eg bug/proj4
bash: ,/Debug/proj4: No such file or directory
mrn6@chomsky:~/workspace/112/proj4$ ./Debug/proj4
Running Matrix tests...
Testing default constructor... 0  1 Passed!
Testing explicit constructor... 1  2 Passed!
Testing copy constructor...  1  2  Passed!
Testing =...  0  1  2  3  4  5 Passed!
Testing ==...  1  2  3  4 Passed!
Testing subscripts...  1  2  3  4  5  6 Passed!
Testing !=...  0  1  2  3 Passed!
Testing getTranspose()...  0  1a  1b Passed!
Testing +...  0  1a  1b  2  3 Passed!
Testing -...  0  1a  1b  2  3 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
All tests passed!

Welcome to the Matrix program!
Please choose an operation:
1. :Addition
2. :Subtraction:
3. :Transpose:
2
Please enter the name of the file containing the first matrix: 
MatrixTest1.c x txt
Please enter the name of the file containing the second matrix: 
MatrixTest1Copy.txt
The resultant matrix is:
[0, 0, 0, 0
0, 0, 0, 0
0, 0, 0, 0]
mrn6@chomsky:~/workspace/112/proj4$ ./Debug/proj4
Running Matrix tests...
Testing default constructor... 0  1 Passed!
Testing explicit constructor... 1  2 Passed!
Testing copy constructor...  1  2  Passed!
Testing =...  0  1  2  3  4  5 Passed!
Testing ==...  1  2  3  4 Passed!
Testing subscripts...  1  2  3  4  5  6 Passed!
Testing !=...  0  1  2  3 Passed!
Testing getTranspose()...  0  1a  1b Passed!
Testing +...  0  1a  1b  2  3 Passed!
Testing -...  0  1a  1b  2  3 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
All tests passed!

Welcome to the Matrix program!
Please choose an operation:
1. :Addition
2. :Subtraction:
3. :Transpose:
3
Please enter the name of the file containing the first matrix: 
MatrixTest1.c txt
The resultant matrix is:
[1, 5, 9
2, 6, 10
3, 7, 11
4, 8, 12]
mrn6@chomsky:~/workspace/112/proj4$ exit

Script done on Mon 10 Oct 2016 04:31:47 PM EDT
