Script started on Mon 03 Oct 2016 04:05:28 PM EDT
mrn6@goldberg:~/workspace/112/proj3$ ls
Application.cpp  tester.cpp  Vec.h	       vecTest1.txt	 VecTester.cpp
Application.h	 typescript  vecStreamOut.txt  vecTest2Copy.txt  VecTester.h
Debug		 Vec.cpp     vecTest1Copy.txt  vecTest2.txt
mrn6@goldberg:~/workspace/112/proj3$ cat Application.cpp
/*
 * Application.cpp
 *
 *  Created on: Oct 3, 2016
 *      Author: Matthew Nykamp and Royce Lloyd
 *
 *      Matthew Nykamp is responsible for the following methods:
 *      -operator[]() write version
 *      -writeTo()
 *      -operator+()
 *      -operator*()
 *      Royce Lloyd is responsible for the following methods:
 *      -operator[]() read version
 *      -operator!=()
 *      -readFrom()
 *      -operator-()
 */

#include "Application.h"
#include "Vec.h"
#include <iostream>

Application::Application() {
}

// This method asks the user to input dim, the dimensions in the system.
// It then asks for the starting location for the user to input, and it
// takes a user-defined number of vectors and adds them to the starting
// point, returning the resultant vector.

void Application::run() {
	cout << "Welcome to the vector program!" << endl;
	cout << "Please enter the number of dimensions: " << flush;
	unsigned dim, numVectors;
	cin >> dim;
	cout << "Please enter the " << dim
			<< " coordinates of the starting location: " << flush;
	Vec start(dim);
	for (unsigned i = 0; i < dim; i++) {
		cin >> start[i];
	}
	cout << "How many vectors will be added? " << flush;
	cin >> numVectors;
	for (unsigned i = 0; i < numVectors; i++) {
		Vec add(dim);
		cout << "Please enter the " << dim << " coordinates of the vector: "
				<< flush;
		for (unsigned i = 0; i < dim; i++) {
			cin >> add[i];
		}
		start = start + add;
	}
	cout << "The coordinates of this vector are: {" << flush;
	for (unsigned i = 0; i < dim; i++) {
		if (dim != 1 && i != dim - 1) {
			cout << start[i] << ", ";
		} else {
			cout << start[i];
		}
	}
	cout << "}" << endl;
}
mrn6@goldberg:~/workspace/112/proj3$ cat Application.h
/*
 * Application.h
 *
 *  Created on: Oct 3, 2016
 *      Author: Matthew Nykamp
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_

class Application{
public:
	Application();
	void run();
private:

};



#endif /* APPLICATION_H_ */
mrn6@goldberg:~/workspace/112/proj3$ cat tester.cpp 
/* tester.cpp drives the testing of our Vec class.
 * Student: Matthew Nykamp
 * Date: 9-27-16
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "Application.h"

int main() {
	VecTester vt;
	vt.runTests();
	Application a;
	a.run();
}
mrn6@goldberg:~/workspace/112/proj3$ cat Vec.cpp
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student Name: Matthew Nykamp
 * Date: 9-27-16
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "Vec.h"
#include <stdexcept>
#include <fstream>
#include <cassert>
#include <string>

/* Default constructor, initializes mySize to be 0
 * and myArray to be NULL
 */
Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}

/*Explicit constructor for the class, sets the size to be the
 * unsigned passed in.
 */
Vec::Vec(unsigned size) {
	mySize = size;
	myArray = new Item[size];
	for (int i = 0; i < size; i++) {
		myArray[i] = 0;
	}
}

/*	Copy constructor, creates a deep copy of the Vec passed in.
 *
 */
Vec::Vec(const Vec& original) {
	mySize = original.mySize;
	if (mySize == 0) {
		myArray = NULL;
	} else if (mySize > 0) {
		myArray = new Item[mySize];
		for (int i = 0; i < mySize; i++) {
			myArray[i] = original.myArray[i];
		}
	}

}

/* Sets the Vec to have all the same values as
 * another Vec, original, zeroes will be added if
 * original is larger than this Vec.
 */
Vec& Vec::operator=(const Vec& original) {
	if (myArray == original.myArray) {
		return *this;
	}
	if (myArray != NULL) {
		delete[] myArray;
	}
	if (original.mySize == 0) {
		myArray = NULL;
		mySize = 0;
	} else if (original.mySize > 0) {
		myArray = new Item[original.mySize];
		for (int i = 0; i < original.mySize; i++) {
			myArray[i] = original.myArray[i];
		}
		mySize = original.mySize;
	}
	return *this;
}

/* Returns the variable mySize, the number of
 * elements in this Vec.
 */
unsigned Vec::getSize() {
	return mySize;
}

/* Sets the Item at index to be it, an Item argument.
 *
 */
void Vec::setItem(unsigned index, const Item& it) {
	if (index > mySize || index < 0 || mySize == 0 || index >= mySize) {
		throw std::range_error("index out of range");
	} else {
		myArray[index] = it;
	}
}

/* Returns the Item at an unsigned argument index.
 *
 */
Item Vec::getItem(unsigned index) const {
	if (index > mySize || index < 0 || mySize == 0 || index >= mySize) {
		throw std::range_error("index out of range");
	} else {
		return myArray[index];
	}
}

/* Sets the size of this Vec to be newSize, an unsigned argument.
 * If we are expanding the Vec, zeroes are added for all created elements.
 */
void Vec::setSize(unsigned newSize) {
	Vec temp = *this;
	if (newSize != mySize) {
		if (newSize == 0) {
			mySize = 0;
			delete[] myArray;
			myArray = NULL;
		} else if (newSize > mySize) {
			delete[] myArray;
			myArray = new Item[newSize];
			for (int i = 0; i < mySize; i++) {
				myArray[i] = temp.getItem(i);
			}
			for (int i = mySize; i < newSize; i++) {
				myArray[i] = 0;
			}
		} else if (newSize < mySize) {
			delete[] myArray;
			myArray = new Item[newSize];
			for (int i = 0; i < newSize; i++) {
				myArray[i] = temp.getItem(i);
			}
		}
	}
	mySize = newSize;
}

/* Returns true if this Vec and v2 have the same values and size.
 *
 */
bool Vec::operator==(const Vec& v2) {
	if (mySize == v2.mySize) {
		for (int i = 0; i < mySize; i++) {
			if (myArray[i] != v2.getItem(i)) {
				return false;
			}
		}
		return true;
	}
	return false;
}

/* For every element, this method sends an Item
 * to an istream which is passed in.
 */
void Vec::readFrom(istream& in) {
	for (int i = 0; i < mySize; i++) {
		in >> myArray[i];
	}
}

/* Reads in the first Item from fileName into mySize,
 * then fills myArray with Items from fileName.
 */
void Vec::readFrom(string filename) {
	ifstream fin(filename.c_str());
	assert(fin.is_open());
	delete[] myArray;
	fin >> mySize;
	myArray = new Item[mySize];
	for (int i = 0; i < mySize; i++) {
		fin >> myArray[i];
	}
	fin.close();
}

/* Replaces every element with an Item read in from out, an ostream.
 *
 */
void Vec::writeTo(ostream& out) const {
	for (int i = 0; i < mySize; i++) {
		out << myArray[i] << endl;
	}
}

/* First writes mySize into fileName, then
 * writes all the values of myArray into fileName.
 */
void Vec::writeTo(string fileName) const {
	ofstream fout(fileName.c_str());
	assert(fout.is_open());
	fout << mySize << endl;
	for (int i = 0; i < mySize; i++) {
		fout << myArray[i] << endl;
	}
	fout.close();
}

/* Adds the elements of two vectors together, returning the result.
 * Throws an invalid argument exception if the vectors are not the same size.
 */
Vec Vec::operator+(const Vec& addend) {
	if (mySize != addend.mySize) {
		throw std::invalid_argument("vectors are not the same size");
	}
	Vec temp = *this;
	for (int i = 0; i < mySize; i++) {
		temp.setItem(i, myArray[i] + addend.getItem(i));
	}
	return temp;
}

/* Subtracts the elements of two vectors together, returning the result.
 * Throws an invalid argument exception if the vectors are not the same size.
 */
Vec Vec::operator-(const Vec& addend) {
	if (mySize != addend.mySize) {
		throw std::invalid_argument("vectors are not the same size");
	}
	Vec temp = *this;
	for (int i = 0; i < mySize; i++) {
		temp.setItem(i, myArray[i] - addend.getItem(i));
	}
	return temp;
}

/* Returns false if the compared against Vec
 * has a different size or if no element is the same as
 * this Vec
 */
bool Vec::operator!=(const Vec& v2) {
	int a = 0;
	if (mySize == v2.mySize) {
		for (int i = 0; i < mySize; i++) {
			if (myArray[i] == v2.myArray[i]) {
				a += 1;
			}
		}
		if (a == mySize) {
			return false;
		}
	}
	return true;

}

/* Multiplies each of the elements of two Vecs together, returning the resultant Vec.
 * Throws an invalid argument exception if the Vecs are not the same size.
 */
double Vec::operator*(const Vec& factor) {
	if (mySize != factor.mySize) {
		throw std::invalid_argument("vectors are not the same size");
	}
	Vec sums(mySize);
	for (int i = 0; i < mySize; i++) {
		sums.setItem(i, myArray[i] * factor.myArray[i]);
	}
	double sum = 0;
	for (int i = 0; i < mySize; i++) {
		sum += sums.getItem(i);
	}
	return sum;
}

/* Write version of the subscript operator; returns
 * the actual Item stored in myArray so it can be modified.
 */
Item& Vec::operator[](unsigned index) {
	if (index >= mySize) {
		throw range_error("index out of bounds");
	}
	return myArray[index];
}

/* Read version of the subscript operator; returns the
 * value of myArray at index so it cannot be modified.
 *
 */
const Item& Vec::operator[](unsigned index) const {
	if (index >= mySize) {
		throw range_error("index out of bounds");
	}
	return myArray[index];
}

/* Deallocates the memory used by this Vec,
 * sets mySize to be zero, and sets myArray
 * to be NULL.
 */
Vec::~Vec() {
	delete[] myArray;
	myArray = NULL;
	mySize = 0;
}
mrn6@goldberg:~/workspace/112/proj3$ cat Vec.h
/* Vec.h provides a simple vector class named Vec.
 * Student Name: Matthew Nykamp
 * Date: 9-27-16
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
using namespace std;

typedef double Item;

class Vec {
public:
	Vec();
	Vec(unsigned);
	Vec(const Vec&);
	virtual ~Vec();
	Vec& operator=(const Vec&);
	unsigned getSize();
	void setItem(unsigned, const Item&);
	Item getItem(unsigned) const;
	void setSize(unsigned);
	bool operator==(const Vec&);
	void writeTo(ostream&) const;
	void readFrom(istream&);
	Item& operator[](unsigned);
	const Item& operator[](unsigned) const;
	Vec operator+(const Vec&);
	Vec operator-(const Vec&);
	double operator*(const Vec&);
	bool operator!=(const Vec& v2);
	void writeTo(string) const;
	void readFrom(string);
private:
	unsigned mySize;
	Item * myArray;
	friend class VecTester;
};

#endif /*VEC_H_*/
mrn6@goldberg:~/workspace/112/proj3$ cat C VF ecTester.cpp
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name: Matthew Nykamp
 * Date: 9-27-16
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 *
 * testSubscriptWriteTo and testSubscriptReadFrom were both co-developed
 * by Matthew Nykamp
 * and Royce Lloyd
 */

#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	testSubscriptWriteTo();
	testSubscriptReadFrom();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert(v1.mySize == 3);
	assert(v1.myArray != NULL);
	for (int i = 0; i < 3; i++) {
		assert(v1.myArray[i] == 0);
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert(v2.mySize == 8);
	assert(v2.myArray != NULL);
	for (int i = 0; i < 8; i++) {
		assert(v2.myArray[i] == 0);
	}
	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert(v4.myArray[i] == 0);
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i + 1);
	}
	Vec v6(v5);
	assert(v6.mySize == 5);
	assert(v6.myArray != NULL);
	assert(v6.myArray != v5.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert(v6.myArray[i] == v5.myArray[i]);
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout
			<< "Passed, but make sure ~Vec() is returning the array's memory to the system!"
			<< endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i + 1);
	}
	Vec v4;
	v4 = v3;
	assert(v4.mySize == 5);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert(v4.myArray[i] == (i + 1));
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i + 1) * 10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert(v5.myArray[i] == (i + 1));
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i + 1) * 10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert(v6.myArray[i] == (i + 1));
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i + 1) * 10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert(v7.myArray[i] == (i + 1));
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert(v9.mySize == 5);
	assert(v9.mySize == 5);
	assert(v8.myArray != v3.myArray);
	assert(v8.myArray != v3.myArray);
	assert(v9.myArray != v8.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert(v8.myArray[i] == (i + 1));
		assert(v9.myArray[i] == (i + 1));
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert(v3.mySize == 5);
	assert(v3.myArray != NULL);
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i + 1));
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert(v1.getSize() == 0);
	cout << " 1 " << flush;
	Vec v2(5);
	assert(v2.getSize() == 5);
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i + 1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert(v.myArray[i] == (i + 1));
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i + 1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert(v.getItem(i) == (i + 1));
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert(v0.getSize() == 3);
	for (unsigned i = 0; i < 3; i++) {
		assert(v0.getItem(i) == 0);
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i + 1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert(v1.getSize() == 8);
	for (unsigned i = 0; i < 5; i++) {
		assert(v1.getItem(i) == (i + 1));
	}
	for (unsigned i = 5; i < 8; i++) {
		assert(v1.getItem(i) == 0);
	}
	assert(v1.myArray != saveAddress);
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i + 1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert(v2.getSize() == 3);
	for (unsigned i = 0; i < 3; i++) {
		assert(v2.getItem(i) == (i + 1));
	}
	assert(v2.myArray != saveAddress);
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i + 1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert(v3.getSize() == 5);
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.getItem(i) == (i + 1));
	}
	assert(v3.myArray == saveAddress);
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert(v3.getSize() == 0);
	assert(v3.myArray == NULL);
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert(v1 == v2);
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert(v3 == v4);
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i + 1);
		v6.setItem(i, i + 1);
	}
	assert(v5 == v6);
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert(!(v7 == v8));
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert(!(v9 == v10));
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert(!(v9 == v11));
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert(!(v9 == v12));
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
	cout << "Testing writeTo(ostream)... " << flush;
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i + 10);
	}
	// write to an ofstream instead of cout, to automate the test
	ofstream fout("vecStreamOut.txt");
	assert(fout.is_open());
	fout << v1.getSize() << "\n";
	v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
	ifstream fin("vecStreamOut.txt");
	assert(fin.is_open());
	unsigned size;
	fin >> size;
	assert(size == 5);
	double value;
	for (unsigned i = 0; i < 5; i++) {
		fin >> value;
		assert(value == i + 10);
	}
	cout << "Passed! See 'vecStreamOut.txt' for values..." << endl;
}

void VecTester::testReadFromStream() const {
	cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
	ifstream fin("vecStreamOut.txt");
	assert(fin.is_open());
	// get the size and build the Vec
	unsigned size;
	fin >> size;
	assert(size == 5);
	Vec v(size);
	// test readFrom()
	v.readFrom(fin);
	for (unsigned i = 0; i < 5; i++) {
		assert(v.getItem(i) == i + 10);
	}
	fin.close();
	cout << "Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert(!(v0 != v1));
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert(v1 != v2);
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert(!(v3 != v4));
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i + 1;
	}
	assert(v3 != v4);
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert(v3.getItem(0) == 3);
	assert(v3.getItem(1) == 6);
	assert(v3.getItem(2) == 9);
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert(v1.getItem(0) == saveV1.getItem(0));
	assert(v1.getItem(1) == saveV1.getItem(1));
	assert(v1.getItem(2) == saveV1.getItem(2));
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert(v3.getSize() == 0);
	assert(v3.myArray == NULL);
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert(v3.getItem(0) == -1);
	assert(v3.getItem(1) == -2);
	assert(v3.getItem(2) == -3);
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert(v1.getItem(0) == saveV1.getItem(0));
	assert(v1.getItem(1) == saveV1.getItem(1));
	assert(v1.getItem(2) == saveV1.getItem(2));
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert(v3.getSize() == 0);
	assert(v3.myArray == NULL);
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert(product == 28);
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert(v1.getItem(0) == saveV1.getItem(0));
	assert(v1.getItem(1) == saveV1.getItem(1));
	assert(v1.getItem(2) == saveV1.getItem(2));
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert(product == 0);
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert(v1.getSize() == 3);
	assert(v1.myArray != NULL);
	assert(v1.getItem(0) == 1);
	assert(v1.getItem(1) == 2);
	assert(v1.getItem(2) == 3);
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert(v2.getSize() == 4);
	cout << " 2 " << flush;
	assert(v2.myArray != NULL);
	assert(v2.getItem(0) == 2);
	assert(v2.getItem(1) == 4);
	assert(v2.getItem(2) == 6);
	assert(v2.getItem(3) == 8);
	/* the last assertion assumes that the new array's base
	 *  address is different from the old array's base address,
	 *  which may not be true. If your method seems to be right,
	 *  is correctly using delete to deallocate the old array,
	 *  and passes all assertions except this one, you may
	 *  comment out this assertion.
	 */
//	assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
	assert(v3.getSize() == 3);
	assert(v3.myArray != NULL);
	assert(v3.getItem(0) == 1);
	assert(v3.getItem(1) == 2);
	assert(v3.getItem(2) == 3);
	cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
	assert(v3.getSize() == 4);
	assert(v3.myArray != NULL);
	assert(v3.getItem(0) == 2);
	assert(v3.getItem(1) == 4);
	assert(v3.getItem(2) == 6);
	assert(v3.getItem(3) == 8);
	cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

//

void VecTester::testSubscriptWriteTo() const {
	cout << "testing subscript WriteTo... " << flush;
	// test against the empty case
	Vec v1;
	try {
		v1[0] = 4;
		cerr << "WriteTo worked on an empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// testing an initialized array
	Vec v2(3);
	for (int i = 0; i < v2.getSize(); i++) {
		v2[i] = i + 1;
	}
	assert(v2.myArray[0] == 1);
	assert(v2.myArray[1] == 2);
	assert(v2.myArray[2] == 3);
	cout << " 1 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSubscriptReadFrom() const {
	cout << "testing subscript ReadFrom... " << flush;
	// test against the empty case
	Vec v1;
	try {
		v1[1] == 4;
		cerr << "ReadFrom worked on an empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// testing an initialized array
	Vec v2(3);
	for (int i = 0; i < v2.getSize(); i++) {
		v2[i] = i + 1;
	}
	assert(v2[0] == 1);
	assert(v2[1] == 2);
	assert(v2[2] == 3);
	cout << " 1 " << flush;
	cout << "Passed!" << endl;
}
mrn6@goldberg:~/workspace/112/proj3$ cat VecTester.h
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name: Matthew Nykamp
 * Date: 9-27-16
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
	void testSubscriptWriteTo() const;
	void testSubscriptReadFrom() const;
};

#endif /*VECTESTER_H_*/
mrn6@goldberg:~/workspace/112/proj3$ cd Debug
mrn6@goldberg:~/workspace/112/proj3/Debug$ ls
Application.d  objects.mk  subdir.mk  Vec.d	   VecTester.o
Application.o  proj3	   tester.d   Vec.o
makefile       sources.mk  tester.o   VecTester.d
mrn6@goldberg:~/workspace/112/proj3/Debug$ make all
make: Nothing to be done for 'all'.
mrn6@goldberg:~/workspace/112/proj3/Debug$ cd ..
mrn6@goldberg:~/workspace/112/proj3$ ./Debug/proj3
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
testing subscript WriteTo...  0  1 Passed!
testing subscript ReadFrom...  0  1 Passed!
All tests passed!
Welcome to the vector program!
Please enter the number of dimensions: 3
Please enter the 3 coordinates of the starting location: 0
0
0
How many vectors will be added? 2
Please enter the 3 coordinates of the vector: 1
2
3
Please enter the 3 coordinates of the vector: 3
3
3
The coordinates of this vector are: {4, 5, 6}
mrn6@goldberg:~/workspace/112/proj3$ ./Debg ug/Proj3
bash: ./Debug/Proj3: No such file or directory
mrn6@goldberg:~/workspace/112/proj3$ ./Debug/Proj3proj3j3Proj3proj3
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
testing subscript WriteTo...  0  1 Passed!
testing subscript ReadFrom...  0  1 Passed!
All tests passed!
Welcome to the vector program!
Please enter the number of dimensions: 2
Please enter the 2 coordinates of the starting location: -3
5
How many vectors will be added? 1
Please enter the 2 coordinates of the vector: 3
-5
The coordinates of this vector are: {0, 0}
mrn6@goldberg:~/workspace/112/proj3$ exit

Script done on Mon 03 Oct 2016 04:08:16 PM EDT
